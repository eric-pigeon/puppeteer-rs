{{autoGeneratedComment}}
use serde::{Deserialize, Serialize};

{{#each domain.types}}
{{#if (lookup ../enumTypes this.id)}}
  {{#each (lookup ../enumTypes this.id)}}
    #[derive(Deserialize, Serialize, Debug, Clone)]
    #[serde(rename_all = "camelCase")]
    pub enum {{camelize (concat ../id (ufirst name))}} {
      {{#each enum}}
        {{camelize this}},
      {{/each}}
    }
  {{/each}}
{{/if}}
{{#if description}}
// {{{comment description}}}
{{/if}}
{{> (domainTypePartial this) }}
{{/each}}

{{! commands }}
{{#each domain.commands}}
{{#if (lookup ../commandEnumTypes name)}}
  {{#each (lookup ../commandEnumTypes name)}}
    #[derive(Serialize, Deserialize, Debug, Clone)]
    #[serde(rename_all = "camelCase")]
    pub enum {{camelize (concat ../id (ufirst name))}} {
      {{#each enum}}
        {{camelize this}},
      {{/each}}
    }
  {{/each}}
{{/if}}
{{#if description}}
// {{{comment description}}}
{{/if}}
#[derive(Serialize, Debug)]
pub struct {{camelize name}} {
{{#if parameters}}
{{#each parameters}}
  {{#if description}}
  // {{{comment description}}}
  {{/if}}
  {{> (propertyTypePartial this)}}
{{/each}}
{{/if}}
}
#[derive(Deserialize, Debug, Clone)]
pub struct {{camelize (concat name "ReturnObject")}} {
{{#if returns}}
  {{#each returns}}
  {{#if description}}
  // {{{comment description}}}
  {{/if}}
  {{> (propertyTypePartial this)}}
  {{/each}}
{{/if}}
}
impl super::Command for {{camelize name}} {
    const NAME: &'static str = "{{../domain.domain}}.{{name}}";

    type ReturnObject = {{camelize (concat name "ReturnObject")}};
}
{{/each}}

{{! events }}
